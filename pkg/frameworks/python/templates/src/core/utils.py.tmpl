"""Shared utilities for {{.ProjectName}} MCP server."""

import os
from pathlib import Path
from typing import Dict, Any

import yaml


def load_config(config_path: str) -> Dict[str, Any]:
    """Load configuration from YAML file.
    
    Args:
        config_path: Path to the configuration file
        
    Returns:
        Configuration dictionary
    """
    try:
        with open(config_path, 'r') as f:
            return yaml.safe_load(f) or {}
    except FileNotFoundError:
        return {}
    except Exception as e:
        print(f"Error loading config from {config_path}: {e}")
        return {}


def get_shared_config() -> Dict[str, Any]:
    """Get shared configuration that tools can access.
    
    Returns:
        Shared configuration dictionary
    """
    config = load_config("kmcp.yaml")
    return config.get("tools", {})


def get_tool_config(tool_name: str) -> Dict[str, Any]:
    """Get configuration for a specific tool.
    
    Args:
        tool_name: Name of the tool
        
    Returns:
        Tool-specific configuration
    """
    shared_config = get_shared_config()
    return shared_config.get(tool_name, {})


def get_env_var(key: str, default: str = "") -> str:
    """Get environment variable with fallback.
    
    Args:
        key: Environment variable key
        default: Default value if not found
        
    Returns:
        Environment variable value or default
    """
    return os.environ.get(key, default)


def _load_env_file(env_file: Path, logger) -> None:
    """Load a single .env file.
    
    Args:
        env_file: Path to the .env file
        logger: Logger instance
    """
    try:
        from dotenv import load_dotenv
        load_dotenv(env_file)
        logger.info(f"Loaded environment variables from {env_file}")
    except Exception as e:
        logger.error(f"Failed to load .env file from {env_file}: {e}")


def _load_env_files_from_directory(secrets_path: Path, logger) -> None:
    """Load .env files from a secrets directory.
    
    Args:
        secrets_path: Path to the secrets directory
        logger: Logger instance
    """
    for secret_dir in secrets_path.iterdir():
        if secret_dir.is_dir():
            env_file = secret_dir / ".env"
            if env_file.exists():
                logger.info(f"Found .env file in {secret_dir}")
                _load_env_file(env_file, logger)
            else:
                logger.info(f"No .env file found in {secret_dir}")


def load_secrets_from_mounted_volumes() -> set[str]:
    """Load environment variables from mounted secrets.
    
    Returns:
        Set of environment variable names that were loaded
    """
    import logging
    from pathlib import Path
    
    logger = logging.getLogger(__name__)
    
    # Store initial environment variables
    initial_env_vars = set(os.environ.keys())
    
    # Check for mounted secrets in Kubernetes container
    kubernetes_secrets_path = Path("/secrets")
    if kubernetes_secrets_path.exists():
        logger.info("Found Kubernetes secrets directory at /secrets")
        _load_env_files_from_directory(kubernetes_secrets_path, logger)
    else:
        logger.info("No Kubernetes secrets directory found at /secrets")
        return set()
    
    # Get the new environment variables that were added
    current_env_vars = set(os.environ.keys())
    newly_loaded = current_env_vars - initial_env_vars
    
    return newly_loaded


def log_secrets_loaded(loaded_env_vars: set[str]) -> None:
    """Log the environment variables that were loaded. For debug purposes only.
    
    Args:
        loaded_env_vars: Set of environment variable names that were loaded
    """
    import logging
    
    logger = logging.getLogger(__name__)
    
    if loaded_env_vars:
        # Sort the variable names for consistent logging
        sorted_vars = sorted(loaded_env_vars)
        logger.info(f"✅ Successfully loaded {len(loaded_env_vars)} environment variables from mounted secrets: {', '.join(sorted_vars)}")
    else:
        logger.info("ℹ️  No environment variables loaded from mounted secrets") 